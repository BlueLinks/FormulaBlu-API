name: Complete CI/CD Pipeline

on:
    push:
        branches: [main]
    pull_request:
        types: [opened, synchronize, reopened, closed]
        branches: [main]

env:
    REGISTRY: docker.io
    IMAGE_NAMESPACE: formulablu
    # Environment-specific configuration
    DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY || 'docker.io' }}
    DOCKER_NAMESPACE: ${{ secrets.DOCKER_NAMESPACE || 'formulablu' }}

jobs:
    # Test job - runs on all PRs and pushes
    test:
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request' || github.event_name == 'push'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  submodules: recursive
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up JDK 21
              uses: actions/setup-java@v4
              with:
                  java-version: "21"
                  distribution: "temurin"

            - name: Cache Gradle packages
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.gradle/caches
                      ~/.gradle/wrapper
                  key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                  restore-keys: |
                      ${{ runner.os }}-gradle-

            - name: Make gradlew executable
              run: chmod +x formulaBlu/gradlew

            - name: Run tests
              run: |
                  cd formulaBlu
                  ./gradlew test --no-daemon

            - name: Generate test report
              uses: dorny/test-reporter@v1
              if: success() || failure()
              with:
                  name: Gradle Tests
                  path: formulaBlu/*/build/test-results/test/TEST-*.xml
                  reporter: java-junit

    # Build and push job - only runs on main branch
    build-and-push:
        runs-on: ubuntu-latest
        needs: test
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))

        strategy:
            matrix:
                api: [drivers-api, teams-api, tracks-api, races-api, seasons-api, events-api, results-api, api-gateway]

        steps:
            - name: Validate required secrets
              run: |
                  if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
                      echo "❌ DOCKERHUB_USERNAME secret is required but not set"
                      exit 1
                  fi
                  if [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
                      echo "❌ DOCKERHUB_TOKEN secret is required but not set"
                      exit 1
                  fi
                  echo "✅ All required secrets are available"

            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  submodules: recursive
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up JDK 21
              uses: actions/setup-java@v4
              with:
                  java-version: "21"
                  distribution: "temurin"

            - name: Cache Gradle packages
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.gradle/caches
                      ~/.gradle/wrapper
                  key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                  restore-keys: |
                      ${{ runner.os }}-gradle-

            - name: Make gradlew executable
              run: chmod +x formulaBlu/gradlew

            - name: Build specific API
              run: |
                  cd formulaBlu
                  ./gradlew :${{ matrix.api }}:bootJar --no-daemon

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.DOCKER_REGISTRY }}
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/${{ matrix.api }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=sha,prefix={{branch}}-
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push ${{ matrix.api }}
              uses: docker/build-push-action@v5
              with:
                  context: ./formulaBlu
                  file: ./formulaBlu/${{ matrix.api }}/Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  platforms: linux/amd64

    # Security scanning
    security-scan:
        runs-on: ubuntu-latest
        needs: build-and-push
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: "formulablu/drivers-api:latest"
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: "trivy-results.sarif"

    # Update deployments
    update-deployments:
        runs-on: ubuntu-latest
        needs: [build-and-push, security-scan]
        if: always() && needs.build-and-push.result == 'success'

        steps:
            - name: Checkout deployment repo
              uses: actions/checkout@v4
              with:
                  repository: ${{ github.repository_owner }}/FormulaBlu-Deployments
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Update deployment manifests
              run: |
                  # Update each API deployment with the new image tag
                  for api in drivers-api teams-api tracks-api races-api seasons-api events-api results-api api-gateway; do
                    if [ -f "modules/$api/${api}-deployment.yaml" ]; then
                      sed -i "s|image: formulablu/$api:.*|image: formulablu/$api:${{ github.sha }}|g" "modules/$api/${api}-deployment.yaml"
                      echo "Updated $api deployment with image tag: ${{ github.sha }}"
                    fi
                  done

                  # Commit and push changes to deployment repo
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git add .
                  git diff --staged --quiet || git commit -m "Update image tags to ${{ github.sha }} [skip ci]"
                  git push origin main || echo "No changes to commit or push failed"

            - name: Summary
              run: |
                  echo "## 🚀 Complete CI/CD Pipeline Successful!" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### ✅ Completed Steps:" >> $GITHUB_STEP_SUMMARY
                  echo "- [x] Code checkout with OAS submodule" >> $GITHUB_STEP_SUMMARY
                  echo "- [x] Java 21 setup and Gradle caching" >> $GITHUB_STEP_SUMMARY
                  echo "- [x] Unit tests execution" >> $GITHUB_STEP_SUMMARY
                  echo "- [x] Docker images built and pushed" >> $GITHUB_STEP_SUMMARY
                  echo "- [x] Security vulnerability scanning" >> $GITHUB_STEP_SUMMARY
                  echo "- [x] Kubernetes deployment manifests updated" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### 🐳 Docker Images:" >> $GITHUB_STEP_SUMMARY
                  echo "- formulablu/drivers-api:latest" >> $GITHUB_STEP_SUMMARY
                  echo "- formulablu/teams-api:latest" >> $GITHUB_STEP_SUMMARY
                  echo "- formulablu/tracks-api:latest" >> $GITHUB_STEP_SUMMARY
                  echo "- formulablu/races-api:latest" >> $GITHUB_STEP_SUMMARY
                  echo "- formulablu/seasons-api:latest" >> $GITHUB_STEP_SUMMARY
                  echo "- formulablu/events-api:latest" >> $GITHUB_STEP_SUMMARY
                  echo "- formulablu/results-api:latest" >> $GITHUB_STEP_SUMMARY
                  echo "- formulablu/api-gateway:latest" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### 🔒 Security:" >> $GITHUB_STEP_SUMMARY
                  echo "- Vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
                  echo "- Results available in Security tab" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### 📋 Next Steps:" >> $GITHUB_STEP_SUMMARY
                  echo "1. Deploy to Kubernetes: \`kubectl apply -f FormulaBlu-Deployments/\`" >> $GITHUB_STEP_SUMMARY
                  echo "2. Verify services: \`kubectl get pods -n formulablu\`" >> $GITHUB_STEP_SUMMARY
                  echo "3. Check health: \`kubectl get services -n formulablu\`" >> $GITHUB_STEP_SUMMARY
                  echo "4. View logs: \`kubectl logs -f deployment/<api-name> -n formulablu\`" >> $GITHUB_STEP_SUMMARY
